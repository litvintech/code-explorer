{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","ui-utils/jsonInput.ts","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["isAnyMsgSend","msg","typeUrl","value","dummyContext","nodeUrl","client","typeRegistry","Registry","MsgStoreCode","MsgInstantiateContract","MsgExecuteContract","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","knownBackends","devnet","nodeUrls","denominations","addressPrefix","gasPrice","GasPrice","fromString","keplrChainInfo","rpc","rest","chainId","chainName","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","features","settings","backend","Error","getCurrentBackend","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","loadOrCreateMnemonic","mnemonic","loaded","localStorage","getItem","loadedMnemonic","Bip39","encode","Random","getBytes","toString","setItem","loadKeplrWallet","async","chaindId","w","window","getOfflineSigner","keplr","experimentalSuggestChain","registerKeplrChain","enable","loadOrCreateWalletDirect","hdPath","makeCosmoshubPath","DirectSecp256k1HdWallet","fromMnemonic","hdPaths","prefix","loadLedgerWallet","ledgerTransport","TransportWebUSB","create","LedgerSigner","getAddressAndStargateSigningClient","loadWallet","signer","getAccounts","address","endpoint","StargateSigningClient","connectWithSigner","registry","createStargateSigningClient","webUsbMissing","anyNavigator","navigator","usb","Login","userAddress","setMnemonic","loading","setLoading","error","setError","loginStargate","undefined","signingClient","message","logout","isUserLoggedIn","keplrButton","disabled","title","onChange","event","target","renderLoginButton","UserAddress","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","printableBalance","balance","join","parseMsgContract","json","fromUtf8","JSON","parse","AccountLink","maxLength","to","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","fromAddress","toAddress","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","tx","decodedTx","Tx","decode","body","messages","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","CodeInfo","code","uploadTxHash","creator","checksum","ContractLink","InstanceRow","position","executionCount","setExecutionCount","contract","setContractInfo","getContract","execTxs","tags","label","admin","InstancesEmptyState","CodePage","codeId","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","source","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","text","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","transfer","recipient","coinsPlaceholder","ExecuteContract","contractAddress","executing","setExecuting","memo","setMemo","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","jsObject","executeResponseResult","execute","calculateFee","stringify","ExecutionsTable","sender","HistoryInfo","contractCodeHistory","entry","operation","src","InitializationInfo","instantiationTxHash","queryPlaceholder","get_balance","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","isStargateMsgExecuteContract","setContractCodeHistory","setExecutions","setInstantiationTxHash","getContractCodeHistory","console","getAndSetContractCodeHistory","getAndSetDetails","getAndSetInstantiationTxHash","getExecutionFromStargateMsgExecuteContract","ContractPage","contractAddressParam","ExecutionInfo","timestamp","time","fromRfc3339","success","toLocaleString","funds","toNumber","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","wasm","showAllCode","setShowAllCode","dataInfo","useMemo","wasmByteCode","Uint8Array","getFileType","builder","ellideRight","toBase64","TxInfo","authInfo","fee","gasLimit","signatures","TxPage","txId","txIdParam","block","setBlockInfo","getTx","getBlock","header","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","process","App","setNodeUrl","contextValue","setContextValue","StargateClient","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ee33343.chunk.js","sourcesContent":["import { Any } from \"cosmjs-types/google/protobuf/any\";\n\ntype IAny = Any;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly typeUrl: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.typeUrl === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.typeUrl === msgStoreCodeTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.typeUrl === msgInstantiateContractTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.typeUrl === msgExecuteContractTypeUrl && !!msg.value;\n}\n\n/* eslint-enable @typescript-eslint/camelcase */\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\n\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n  readonly userAddress?: string;\n  readonly setUserAddress: (newUserAddress?: string) => void;\n  readonly signingClient?: StargateSigningClient;\n  readonly setSigningClient: (newSigningClient?: StargateSigningClient) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]),\n  resetClient: () => {},\n  setUserAddress: () => {},\n  setSigningClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","import { GasPrice } from \"@cosmjs/stargate\";\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly denominations: readonly string[];\n  readonly addressPrefix: string;\n  readonly gasPrice: GasPrice;\n  readonly keplrChainInfo?: any;\n}\n\nconst devnetSettings: BackendSettings = {\n  nodeUrls: [\"http://167.172.103.118:26657\"],\n  denominations: [\"boot\"],\n  addressPrefix: \"bostrom\",\n  gasPrice: GasPrice.fromString(\"0.01boot\"),\n  keplrChainInfo: {\n    rpc: \"http://167.172.103.118:26657\",\n    rest: \"http://167.172.103.118:1317\",\n    chainId: \"bostrom-testnet-4\",\n    chainName: \"bostrom-testnet\",\n    stakeCurrency: {\n      coinDenom: \"boot\",\n      coinMinimalDenom: \"boot\",\n      coinDecimals: 0,\n    },\n    bip44: {\n      coinType: 118,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"bostrom\",\n      bech32PrefixAccPub: \"bostrompub\",\n      bech32PrefixValAddr: \"bostromvaloper\",\n      bech32PrefixValPub: \"bostromvaloperpub\",\n      bech32PrefixConsAddr: \"bostromvalcons\",\n      bech32PrefixConsPub: \"bostromvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"BOOT\",\n        coinMinimalDenom: \"boot\",\n        coinDecimals: 0,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"BOOT\",\n        coinMinimalDenom: \"boot\",\n        coinDecimals: 0,\n      },\n    ],\n    features: [\"stargate\"],\n  },\n};\n\n// const devnetStargateSettings: BackendSettings = {\n//   nodeUrls: [\"http://167.172.103.118:26657\"],\n//   denominations: [\"boot\"],\n//   addressPrefix: \"bostrom\",\n//   gasPrice: GasPrice.fromString(\"0.01boot\"),\n// };\n\n// const musselnetSettings: BackendSettings = {\n//   nodeUrls: [\"https://rpc.musselnet.cosmwasm.com\"],\n//   denominations: [\"umayo\", \"ufrites\"],\n//   addressPrefix: \"wasm\",\n//   gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n// };\n\n// const oysternetSettings: BackendSettings = {\n//   nodeUrls: [\"http://rpc.oysternet.cosmwasm.com\"],\n//   denominations: [\"usponge\"],\n//   addressPrefix: \"wasm\",\n//   gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n//   keplrChainInfo: {\n//     rpc: \"http://rpc.oysternet.cosmwasm.com\",\n//     rest: \"http://lcd.oysternet.cosmwasm.com\",\n//     chainId: \"oysternet-1\",\n//     chainName: \"Wasm Oysternet\",\n//     stakeCurrency: {\n//       coinDenom: \"SPONGE\",\n//       coinMinimalDenom: \"usponge\",\n//       coinDecimals: 6,\n//     },\n//     bip44: {\n//       coinType: 118,\n//     },\n//     bech32Config: {\n//       bech32PrefixAccAddr: \"wasm\",\n//       bech32PrefixAccPub: \"wasmpub\",\n//       bech32PrefixValAddr: \"wasmvaloper\",\n//       bech32PrefixValPub: \"wasmvaloperpub\",\n//       bech32PrefixConsAddr: \"wasmvalcons\",\n//       bech32PrefixConsPub: \"wasmvalconspub\",\n//     },\n//     currencies: [\n//       {\n//         coinDenom: \"SPONGE\",\n//         coinMinimalDenom: \"usponge\",\n//         coinDecimals: 6,\n//       },\n//     ],\n//     feeCurrencies: [\n//       {\n//         coinDenom: \"SPONGE\",\n//         coinMinimalDenom: \"usponge\",\n//         coinDecimals: 6,\n//       },\n//     ],\n//     features: [\"stargate\"],\n//   },\n// };\n\nconst knownBackends: Partial<Record<string, BackendSettings>> = {\n  devnet: devnetSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"devnet\";\n  const backend = knownBackends[id];\n  if (!backend) {\n    throw new Error(`No backend found for the given ID \"${id}\"`);\n  }\n  return backend;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { makeCosmoshubPath, OfflineAminoSigner } from \"@cosmjs/amino\";\nimport {\n  CosmWasmClient as StargateClient,\n  SigningCosmWasmClient as StargateSigningClient,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\nimport { DirectSecp256k1HdWallet, OfflineDirectSigner, OfflineSigner, Registry } from \"@cosmjs/proto-signing\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\n\nimport { settings } from \"../settings\";\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\n\nexport { StargateClient, StargateSigningClient };\n\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\nexport function loadOrCreateMnemonic(mnemonic?: string): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded && !mnemonic) {\n    return loaded;\n  }\n  const loadedMnemonic = mnemonic || generateMnemonic();\n  localStorage.setItem(key, loadedMnemonic);\n  return loadedMnemonic;\n}\n\nexport type WalletLoaderDirect = (\n  addressPrefix: string,\n  mnemonic?: string,\n) => Promise<OfflineDirectSigner | OfflineAminoSigner>;\n\nexport function loadKeplrWallet(client: StargateClient, keplrChainInfo: any): WalletLoaderDirect {\n  return async () => {\n    const chaindId = await client.getChainId();\n\n    await registerKeplrChain(keplrChainInfo);\n    const w = window as any;\n    await w.keplr.enable(chaindId);\n\n    return w.getOfflineSigner(chaindId);\n  };\n}\n\nasync function registerKeplrChain(keplrChainInfo: any): Promise<void> {\n  const w = window as any;\n  if (!w.getOfflineSigner || !w.keplr) {\n    throw new Error(\"Please install keplr extension\");\n  }\n\n  if (!w.keplr.experimentalSuggestChain) {\n    throw new Error(\"Please use the recent version of keplr extension\");\n  }\n\n  try {\n    await w.keplr.experimentalSuggestChain(keplrChainInfo);\n  } catch {\n    throw new Error(\"Failed to suggest the chain\");\n  }\n}\n\nexport async function loadOrCreateWalletDirect(\n  addressPrefix: string,\n  mnemonic?: string,\n): Promise<OfflineDirectSigner> {\n  const loadedMnemonic = loadOrCreateMnemonic(mnemonic);\n  const hdPath = makeCosmoshubPath(0);\n  return DirectSecp256k1HdWallet.fromMnemonic(loadedMnemonic, {\n    hdPaths: [hdPath],\n    prefix: addressPrefix,\n  });\n}\n\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineAminoSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\n  const { nodeUrls } = settings.backend;\n  const endpoint = nodeUrls[0];\n\n  const typeRegistry = new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]);\n\n  return StargateSigningClient.connectWithSigner(endpoint, signer, {\n    registry: typeRegistry,\n  });\n}\n\nexport async function getAddressAndStargateSigningClient(\n  loadWallet: WalletLoaderDirect,\n  mnemonic?: string,\n): Promise<[string, StargateSigningClient]> {\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\n  const userAddress = (await signer.getAccounts())[0].address;\n  const signingClient = await createStargateSigningClient(signer);\n  return [userAddress, signingClient];\n}\n\nexport function webUsbMissing(): boolean {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport {\n  getAddressAndStargateSigningClient,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  loadOrCreateWalletDirect,\n  WalletLoaderDirect,\n  webUsbMissing,\n} from \"../ui-utils/clients\";\n\nexport function Login(): JSX.Element {\n  const { userAddress, setUserAddress, setSigningClient, client } = React.useContext(ClientContext);\n  const [mnemonic, setMnemonic] = React.useState<string>();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  async function loginStargate(loadWallet: WalletLoaderDirect): Promise<void> {\n    setLoading(true);\n    setError(undefined);\n\n    try {\n      const [userAddress, signingClient] = await getAddressAndStargateSigningClient(loadWallet, mnemonic);\n      setUserAddress(userAddress);\n      setSigningClient(signingClient);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  function logout(): void {\n    setError(undefined);\n    setUserAddress(undefined);\n    setMnemonic(undefined);\n    setSigningClient(undefined);\n  }\n\n  function renderLoginButton(): JSX.Element {\n    const { keplrChainInfo } = settings.backend;\n\n    let keplrButton;\n    if (keplrChainInfo !== undefined && client !== null) {\n      keplrButton = (\n        <button\n          className=\"dropdown-item\"\n          onClick={async () => loginStargate(loadKeplrWallet(client, keplrChainInfo))}\n        >\n          Keplr wallet\n        </button>\n      );\n    }\n\n    return loading ? (\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n        Loading...\n      </button>\n    ) : (\n      <>\n        <div className=\"mr-3 p-2 rounded bg-white\">\n          <span title=\"Mnemonic for burner wallet\">Mnemonic:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={mnemonic}\n            onChange={(event) => setMnemonic(event.target.value)}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Login\n        </button>\n        <div className=\"dropdown-menu\">\n          <h6 className=\"dropdown-header\">with</h6>\n          <button className=\"dropdown-item\" onClick={() => loginStargate(loadOrCreateWalletDirect)}>\n            Browser wallet\n          </button>\n          {keplrButton}\n          <button\n            className=\"dropdown-item\"\n            onClick={() => loginStargate(loadLedgerWallet)}\n            disabled={webUsbMissing()}\n          >\n            Ledger wallet\n          </button>\n        </div>\n      </>\n    );\n  }\n\n  function renderLogoutButton(): JSX.Element {\n    return (\n      <button className=\"btn btn-primary\" onClick={logout}>\n        Logout\n      </button>\n    );\n  }\n\n  const isUserLoggedIn = !!userAddress;\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { userAddress } = React.useContext(ClientContext);\n\n  return userAddress ? (\n    <div className=\"mr-3 p-2 rounded bg-white\">\n      <span>My address: </span>\n      <span>{userAddress}</span>\n    </div>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\n\nimport { Login } from \"./Login\";\nimport { UserAddress } from \"./UserAddress\";\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\n      <UserAddress />\n      <Login />\n    </header>\n  );\n}\n","import { fromUtf8 } from \"@cosmjs/encoding\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: Coin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function parseMsgContract(msg: Uint8Array): any {\n  const json = fromUtf8(msg);\n\n  return JSON.parse(json);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { MsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = Coin;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nconst stargateEffect = (\n  client: StargateClient,\n  address: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txTransfers = (decodedTx?.body?.messages ?? [])\n          .filter(isAnyMsgSend)\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n        return [...transfers, ...txTransfers];\n      }, []);\n      setTransfers(out);\n    })\n    .catch(() => setTransfers(errorState));\n};\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    client !== null ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers) : () => {},\n    [address, client, typeRegistry],\n  );\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly address: string;\n}\n\nfunction InstanceRow({ position, address }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [contract, setContractInfo] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    (client?.getContract(address) as Promise<Contract>)\n      .then((execTxs) => setContractInfo(execTxs))\n      .catch(() => setContractInfo(errorState));\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n      .then((execTxs) => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [client, address]);\n\n  return isLoadingState(contract) ? (\n    <tr>\n      <td>Loading ...</td>\n    </tr>\n  ) : isErrorState(contract) ? (\n    <tr>\n      <td>Error</td>\n    </tr>\n  ) : (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly string[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    (client?.searchTx({\n      tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\n    }) as Promise<ReadonlyArray<{ readonly hash: string }>>).then((results) => {\n      const first = results.find(() => true);\n      setUploadTxHash(first?.hash);\n    });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((address, index) => (\n                    <InstanceRow position={index + 1} address={address} key={address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getCodes()\n      .then((codeInfos) => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","// Place error box below text box, so appearing error does not push text box down\nexport const jsonInputStyle = {\n  container: { display: \"flex\", flexDirection: \"column\" },\n  body: { order: \"1\" },\n  warningBox: { order: \"2\" },\n};\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, Coin } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  transfer: { recipient: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\", amount: \"1\" },\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: ExecuteResult = await signingClient.execute(\n        userAddress,\n        contractAddress,\n        msgObject.result,\n        calculateFee(400000, settings.backend.gasPrice),\n        memo,\n        coinsObject?.result,\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Execute contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Memo:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={memo}\n            onChange={(event) => setMemo(event.target.value)}\n          />\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Execute contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The contract formatted input\">Response:</span>\n            <pre className=\"mb-0\">{JSON.stringify(executeResponse.result, undefined, \"  \")}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { MsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <ReactJson src={entry.msg} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\n// eslint-disable-next-line @typescript-eslint/camelcase\nconst queryPlaceholder = { get_balance: { address: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\" } };\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    setQueryObject({ result: queryPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={queryPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Contract, ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin as ICoin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport { Any } from \"cosmjs-types/google/protobuf/any\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { ExecuteContract } from \"./ExecuteContract\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype IAnyMsgExecuteContract = {\n  readonly typeUrl: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nfunction isStargateMsgExecuteContract(msg: Any): msg is IAnyMsgExecuteContract {\n  return msg.typeUrl === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  (client.searchTx({\n    tags: makeTags(\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\n    ),\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nconst stargateEffect = (\n  client: StargateClient,\n  contractAddress: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txExecutions = (decodedTx?.body?.messages ?? [])\n          .filter(isStargateMsgExecuteContract)\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n        return [...executions, ...txExecutions];\n      }, []);\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    client !== null\n      ? stargateEffect(\n          client,\n          contractAddress,\n          typeRegistry,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : () => {},\n    [client, contractAddress, typeRegistry],\n  );\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n                <ExecuteContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n  readonly timestamp: string;\n}\n\nexport function ExecutionInfo({ tx, timestamp }: Props): JSX.Element {\n  const time = timestamp ? fromRfc3339(timestamp) : null;\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">Height: {tx.height}</li>\n      <li className=\"list-group-item\">\n        <span title={timestamp}>Time: {time?.toLocaleString()}</span>\n      </li>\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { MsgExecuteContract as IMsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:\n        <ReactJson src={parseMsgContract(msg.msg)} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgInstantiateContract as IMsgInstantiateContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">Label: {msg.label}</li>\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Init message</span>:\n        <ReactJson src={parseMsgContract(msg.msg)} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgSend as IMsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport { MsgStoreCode as IMsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\n      <li className=\"list-group-item\">\n        Data: {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: Tx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Block, IndexedTx } from \"@cosmjs/stargate\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n  setBlockInfo: (block: Block | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n      if (!tx) return;\n      client\n        .getBlock(tx.height)\n        .then((b) => {\n          setBlockInfo(b);\n        })\n        .catch(() => setBlockInfo(errorState));\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  const [block, setBlockInfo] = React.useState<Block | undefined | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(client !== null ? stargateEffect(client, txId, setDetails, setBlockInfo) : () => {}, [\n    client,\n    txId,\n    typeRegistry,\n  ]);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo\n                tx={details}\n                timestamp={isLoadingState(block) || isErrorState(block) ? \"\" : block?.header.time || \"\"}\n              />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg: any, index: number) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    Message {index + 1} (Type: <code>{msg.typeUrl || <em>unset</em>}</code>)\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nconst { nodeUrls } = settings.backend;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [userAddress, setUserAddress] = React.useState<string>();\n  const [signingClient, setSigningClient] = React.useState<StargateSigningClient>();\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n    userAddress: userAddress,\n    setUserAddress: setUserAddress,\n    signingClient: signingClient,\n    setSigningClient: setSigningClient,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = await StargateClient.connect(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\n  }, [signingClient]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\n  }, [userAddress]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}